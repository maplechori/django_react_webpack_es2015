'use strict';

exports.__esModule = true;
exports.default = poll;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _getComponentName = require('./utils/getComponentName');

var _getComponentName2 = _interopRequireDefault(_getComponentName);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var pollerShape = _react2.default.PropTypes.shape({
  subscribe: _react2.default.PropTypes.func.isRequired
});

function poll(interval) {
  var _contextTypes, _childContextTypes;

  var contextName = '@@relayPoller/' + interval;

  var propTypes = {
    relay: _react2.default.PropTypes.object.isRequired
  };

  var contextTypes = (_contextTypes = {}, _contextTypes[contextName] = pollerShape, _contextTypes);

  var childContextTypes = (_childContextTypes = {}, _childContextTypes[contextName] = pollerShape.isRequired, _childContextTypes);

  return function (Component) {
    var displayName = 'poll(' + (0, _getComponentName2.default)(Component) + ')';

    var PollContainer = function (_React$Component) {
      _inherits(PollContainer, _React$Component);

      function PollContainer(props, context) {
        _classCallCheck(this, PollContainer);

        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));

        _this.poll = function () {
          var numToUpdate = _this.listeners.length + 1;
          var numUpdated = 0;

          var onReadyStateChange = function onReadyStateChange(_ref) {
            var done = _ref.done;
            var error = _ref.error;
            var aborted = _ref.aborted;

            if (!(done || error || aborted)) {
              return;
            }

            // Stop polling if we're unmounted.
            if (!_this.pollHandle) {
              return;
            }

            ++numUpdated;
            if (numUpdated !== numToUpdate) {
              return;
            }

            // Only schedule a new poll once everything has updated.
            _this.schedulePoll();
          };

          _this.props.relay.forceFetch(null, onReadyStateChange);
          _this.listeners.forEach(function (listener) {
            listener(onReadyStateChange);
          });
        };

        _this.subscribe = function (listener) {
          _this.listeners.push(listener);

          return function () {
            _this.listeners = _this.listeners.filter(function (item) {
              return item !== listener;
            });
          };
        };

        if (context[contextName]) {
          _this.unsubscribe = null;
        } else {
          _this.pollHandle = null;
          _this.listeners = [];
        }
        return _this;
      }

      PollContainer.prototype.getChildContext = function getChildContext() {
        var _ref3;

        var parent = this.context[contextName];
        if (parent) {
          var _ref2;

          return _ref2 = {}, _ref2[contextName] = parent, _ref2;
        }

        return _ref3 = {}, _ref3[contextName] = this, _ref3;
      };

      PollContainer.prototype.componentDidMount = function componentDidMount() {
        var _this2 = this;

        var parent = this.context[contextName];

        // If there is a parent poller, let it handle the timeouts so we can
        // potentially batch requests.
        if (parent) {
          this.unsubscribe = parent.subscribe(function (onReadyStateChange) {
            _this2.props.relay.forceFetch(null, onReadyStateChange);
          });

          return;
        }

        this.schedulePoll();
      };

      PollContainer.prototype.componentWillUnmount = function componentWillUnmount() {
        if (this.unsubscribe) {
          this.unsubscribe();
        }

        if (this.pollHandle) {
          clearTimeout(this.pollHandle);
          this.pollHandle = null;
        }
      };

      PollContainer.prototype.schedulePoll = function schedulePoll() {
        this.pollHandle = setTimeout(this.poll, interval);
      };

      PollContainer.prototype.render = function render() {
        return _react2.default.createElement(Component, this.props);
      };

      return PollContainer;
    }(_react2.default.Component);

    PollContainer.displayName = displayName;
    PollContainer.propTypes = propTypes;
    PollContainer.contextTypes = contextTypes;
    PollContainer.childContextTypes = childContextTypes;

    return PollContainer;
  };
}
module.exports = exports['default'];